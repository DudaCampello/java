# Aprendendo Java :construction:
## Resumo para entender JAVA


#### CARACTER√çSTICAS DO JAVA

Lema do JAVA - Escreva uma vez e execute em qualquer lugar!

A linguagem JAVA √© compilada por um bytecode que √© interpretado por uma m√°quina virtual (JVM).Basicamente um sistema de tradu√ß√£o para executar em qq lugar, em qq plataforma.

> Linguagem JAVA - Compila√ß√£o(JDK) - Interpreta√ß√£o(JVM) - Execu√ß√£o(OS)   
<br />

##### **IDE** - "um editor". Para desenvolver qq linguagem de programa√ß√£o √© necess√°rio um IDE (ambiente de desenvolvimento integrado). Os mais usados s√£o o Intellij, Eclipse e Visual Code.

##### **JAVA DEVELOPMENT KIT ou JDK** - ferramentas para desenvolver programas. Faz parte do funcionamento das IDE'S.
<br />

##### **Vari√°veis mais utilizadas**: int, double, boolean e String 

üìå Vari√°vel come√ßa com letra min√∫scula ex: double numero; se for palavra composta modelo camelCase

<br />

##### **Tipos de Dados**:

. Num√©ricos: inteiro (byte, short, int, long), ponto flutuante (float, double)

. L√≥gico: boolean (True ou False)

. Alfanumerico: caractere (char), String

. Opera√ß√µes B√°sicas

<br />

üìå Dica: Java Mai√∫sculas s√£o diferenciadas de min√∫sculas

üìå Constante deve ser representada com toda palavra em letra mai√∫scula.

üìå Os tipos referenciados: podem ser criados, usados como refer√™ncia, come√ßam com letra mai√∫scula.

<br />

üìå **Operadores l√≥gicos**

&& = and

|| = or

! = not



##### **CONTROLE DE FLUXO**

###### **ESTRUTURA CONDICIONAL**

- If - Else (n√£o tem elif)

Uma op√ß√£o para escrever if-else √© a condi√ß√£o tern√°ria: 

ex: int nota = 3;

String resultado = nota>=7 ? "Aprovado" : nota>=5 && nota<7 ? "Recupera√ß√£o" : "Reprovado"

- Switch - Case ou escolha-caso - o √∫ltimo √© executado somente quando todos os outros cases falham. Sele√ß√£o m√∫ltipla escolha. Usar o break para encerrar a opera√ß√£o.

###### **ESTRUTURA DE REPETI√á√ÉO**

Permite que o comando seja repetido v√°rias vezes (loops)

- For : vari√°vel testada e incrementada. O comando ser√° executado at√© que a express√£o de valida√ß√£o se torne falsa.

Em For o X √© muito usado para representar √≠ndide de um array e lenght = tamanho.

- For - Each: muito usado para arrays.

- While : o teste √© feito no in√≠cio, se a condi√ß√£o j√° come√ßar sendo falsa j√° interrompe.

- Do - While : o teste √© feito no final. Primeiro faz, depois testa. Testa o bloco ao menos 1 vez.

###### **ESTRUTURA DE EXCE√á√ÉO**

- Try - Todo erro codigo entra no try, ser√° tratado no catch, sendo usado para prevenir erros 
- Catch - c√≥digo executado caso o try estoure uma exce√ß√£o
- Finally - o c√≥digo √© sempre executado, tendo exce√ß√£o ou n√£o

<br />

:warning: **JAVA √â UMA PROGRAMA√á√ÉO ORIENTADA PARA OBJETO**

<br />

Modelo de an√°lise, projeto e programa√ß√£o baseado na aproxima√ß√£o entre o mundo real e o virtual, atrav√©s da cria√ß√£o e intera√ß√£o entre:

> CLASSES | OBJETOS | M√âTODOS | ATRIBUTOS  | OUTROS 

###### **OBJETO** - item, produto, caracter√≠stica; a partir do mesmo molde, da mesma classe.

ex.: Cliente √© o molde, nome-endere√ßo-idade √© o molde a ser seguido, Nina e Pedro √© o objeto.

###### **CLASSE** - representa o todo; √© o molde. 

O nome da **classe** deve ter o mesmo nome do arquivo e come√ßar sempre com letra Mai√∫scula, se tiver uma segunda palavra tamb√©m escrever com letra Mai√∫scula ex: PessoaFisica, e evitar abrevia√ß√µes. 

ex: public class PessoaFisica {

    **tipo + nome;**  // Declara√ß√£p de atributos   
      String nome;   //atributo da classe
      String cpf;    //atributo da classe
      int idade;    //atributo da classe
      
A classe √© p√∫blica ou default, mas os atributos podem ser privados. Se um atributo √© privado √© meio que obrigat√≥rio ter Get and Set.

ex: Vamos criar a classe Banco:

**public class Banco {

 private String nome;
 **private Cliente[] clientes;** //informa√ß√£o recebida da classe Cliente
 
Vamos criar uma segunda classe chamada cliente:
 
public class Cliente {

 private String cliente; //esses dados podem ser enviados para a classe Banco**
 
*O nome do atributo deve come√ßar com letra min√∫scula, segue o padr√£o camelCase, deve evitar abrevia√ß√µes e n√£o pode ter caracter especial.*

Dentro da classe adotamos os atributos, m√©todos e construtores.

Numa classe juntamos 3 coisas que precisam para rodar um programa: dados, a√ß√µes e materializa√ß√£o do conceito.

O ideal √© ter apenas uma classe dentro de cada arquivo.

quando uma classe √© final n√£o pode ser herdada. 

<br />

#### **M√âTODO** 

Tudo o que queremos que aconte√ßa vai estar dentro do m√©todo. S√£o as **a√ß√µes**, o comportamento da nossa classe. 

√â uma por√ß√£o de c√≥digo que √© disponibilizada por uma classe. √â executado quando √© feita uma requisi√ß√£o.

S√£o usados para manipular, modificar o valor do atributo do objeto. 

Sua estrutura consiste em: *tipo de controle de acesso*, tipo de retorno, nome do m√©todo e tipo de vari√°vel recebida.

. Tipo de controle de acesso = visibilidade = pode ser public, private ou protected.

. Tipo de m√©todo = concreto ou abstrato

. Modificador = static ou final. Static permite chamar um m√©todo a partir de uma classe.

. Tipo de retorno - pode ser do tipo primitivo (int double...) ou do tipo referenciado* (escrever com a 1o. letra mai√∫scula ex: Conta, String, Date, Cliente). Pode n√£o ter retono, **void** √© um apontamento para dizer que o m√©todo n√£o retorna nenhum dado. **Return** retorna algo.

ex.: tipo do retorno - (double)

. Nome do m√©todo - deve ser escrito no infinitivo, segue o mesmo padr√£o das vari√°veis. ex: double **obterRendimento** (String numConta, int mes) {

ex.: nome para o m√©todo (obterRendimento)

. Par√¢metro = vai estar dentro dos par√™nteses. O m√©todo pode n√£o ter par√¢metro ().

ex.: par√¢metros para o m√©todo (String numConta, int mes)

A passagem de par√¢metro pode ser por valor ou por refer√™ncia (endere√ßo).

. Exce√ß√µes - s√£o erros que o m√©todo pode disparar

Ex. m√©todo: A forma + utilizada √© public static Retorno Nome (Par√¢metro) {corpo}

O corpo do m√©todo fica entre {}.

Passagem de mensagem atrav√©s de uma classe ou objeto. A assinatura √© a forma de identificar um m√©todo NOME + PAR√ÇMETROS 

ex: calcularTotalVendas (double precoItem1, double precoItem2)

nome() = m√©todo vazio

Em m√©todos usamos o **SET** e o **GET**.

**Chamada de m√©todo** - os objetos se comunicam para realizar tarefas, os par√¢metros s√£o passados por "c√≥pia.

üìå Usamos um ponto **.** :black_circle: para chamada do m√©todo.

ex: conta.debitar(45.0);

conta = vari√°vel contendo refer√™ncia ao objeto

:black_circle: = operador de chamada do m√©todo

debitar = nome do m√©todo chamado

(45.0) = par√¢metro sendo passado

<br />

###### **FUN√á√ïES**

Um exemplo de fun√ß√µes √© Math. Se digitar MATH. aparece v√°rias fun√ß√µes

ex: int menor = math.min(1, 2);
indica o menor nr.

###### **CONSTRUTOR** - cria objetos. √â o ato de solicitar ao m√©todo que o mesmo execute. Pode estar direcionado a um objeto ou a uma classe.

Todo construtor √© p√∫blico para podermos acessar.

    **tipo + nome = //cria√ß√£o do objeto
     Conta conta  =   new **Conta** ();   
         
      

###### **PACKAGE** - ou pasta, bom para organizar as classes em pacotes. Se tiver mais de um package separar por ponto (ex: pasta1.pasta2)

Para dizer ao java que uma classe pertence a um pacote, precisa cria a pasta e declarar na primeira linha que ela pertence aquele pacote, usando o termo package.

ex.:

*package* **com.next.exemplos**;

> public class **Main**{

>   public static void main (String[] args) {
 
>   //escrever codigo
   
  }

###### **ABSTRA√á√ÉO** - capacidade de concentrar nos aspectos que s√£o essenciais, ignorar o que n√£o √© importante para o caso;

###### **HERAN√áA** - Java trabalha com a ideia de refer√™ncia pai - filho. O objeto filho herda caracter√≠sticas dos pais, mas o pai n√£o herda a caracter√≠stica do filho;

Se uma classe est√° numa hierarquia inferior n√£o precisa repetir as caracter√≠sticas (atributos e m√©todos), basta indicar. SuperClasse - SubClasse.

O conceito de extens√£o √© muito presente no java. Com o extense uma classe herda de outra classe. Uma classe n√£o escolhe o filho, o filho que escolhe o pai(classe).

###### **ENCAPSULAMENTO** - termo muito praticado em JAVA, permite deixar tudo organizado, por encapsular os atributos;

###### **COMPOSI√á√ÉO** - busca representar as rela√ß√µes que os objetos devem ter. Isso faz com que os objetos sejam reaproveitados, evitando duplicidade e mantendo a simplicidade;

###### **POLIFORMISMO** - transforma objetos diferentes em objetos que conseguem trocar mensagem por meio de generaliza√ß√£o de suas caracter√≠sticas;

###### **M√âTODO MAIN** - quando uma classe tem o m√©todo MAIN, cria os objetos e imprime na tela; 

###### **INSTANCIAR** - √© criar. Para isso usa o termo **NEW**.

###### **COLLECTION** √© um objeto que agrupa m√∫ltiplos elementos (vari√°veis primitivas ou objeto) dentro de uma unidade. Serve para armazenar e processar conjuntos de dados de forma eficiente.

**Listas** s√£o cole√ß√µes com itera√ß√µes ordenadas. ex.: java.util.List

Lista permite elemento duplicado e garante a ordem de inser√ß√£o. Numa lista de alunos pode ter nomes repetidos e a sequ√™ncia em que foi inserido ser√° impresso.

Podemos fazer lista com ArrayList, Vector e LinkedList. Como escolher? De forma geral ArrayList.

ArrayList - quando demandar > volume de pesquisa
LinkedList - quando demandar grande volume de inser√ß√£o e exclus√£o.

Ao criar uma lista usar imports (ALT+ENTER)

ex.: List <Double> notas = nem ArrayList <Double>();
notas.add(7.0) - repete 7 vezes se tiver nota 7 notas

m√©todo add: repete o trecho 7 vezes

m√©todo add: para adicionar notas = notas.add(4, 8d), onde 4 √© a posi√ß√£o e 8 √© o elemento. Na posi√ß√£o 4 foi adicionado a nota 8.

m√©todo toString: imprime de duas formas - sout(notas.toString)

m√©todo IndexOf - imprime uma posi√ß√£o dentro de uma lista sout("exiba posi√ß√£o nota 5.0: " + notas.indexOf(5d);

m√©todo set: para substituir um elemento - notas.set(posi√ß√£o que quero substituir, elemento)

m√©todo contains: confere se um elemento est√° presente. sout("confira se a nota 5.0 est√° na lista" + notas.contains(5d)); A resposta ser√° true or false.

m√©todo for: para imprimir um elemento embaixo do outro, ex: for(Double nota : notas) sout (nota); 

###### **PARA QUE USAR UML?**

Pensar antes de codificar

Apresentar nossas ideias ao grupo

Aumentar a participa√ß√£o e envolvimento do time

Documentar as ideias quando j√° consolidadas

Atender ao requisitos

Reduzir esfor√ßo de manuten√ß√£o

Facilitar a altera√ß√£o do software

Reduzir retrabalho: reparos ocorrem a n√≠vel de projeto

O Diagrama de Classe √© o mais importante: 

Descreve os v√°rios tipos de objetivo

mostra quem se relaciona com quem, como as classes se relacionam, complementam e transmitem informa√ß√£o. 

- Descrever os v√°rios tipos de objetivos no sistema e o relacionamento entre eles.
- Permitir a visualiza√ß√£o das classes que ir√£o compor o sistema com seus respectivos atributos e m√©todos.
- Demonstrar como as classes se relacionam, complementam e transmitem informa√ß√µes entre si.

√â composto de 3 partes: Superior, meio e inferior

Parte superior: cont√©m o nome da classe. Esta parte √© sempre necess√°ria, seja falando do classificador ou de um objeto.

Parte do meio: cont√©m os atributos da classe. Use esta parte para descrever as qualidades da classe. √â necess√°rio somente quando se descreve uma inst√¢ncia espec√≠fica de uma classe.

Parte inferior: inclui as opera√ß√µes da classe (m√©todos). Exibido em formato de lista, cada opera√ß√£o ocupa sua pr√≥pria linha. As opera√ß√µes descrevem como uma classe interage com dados.

< br / >

##### **DIAGRAMA DE CLASSE**

Ajuda a um sistema. A utiliza√ß√£o de uma modelagem visual facilita a visualiza√ß√£o, e, por conseguinte, a cria√ß√£o de um melhor modelo

Objetivo:

Descrever os v√°rios tipos de objetivos no sistema e o relacionamento entre eles.

Permitir a visualiza√ß√£o das classes que ir√£o compor o sistema com seus respectivos atributos e m√©todos.

Demonstrar como as classes se relacionam, complementam e transmitem informa√ß√µes entre si.

Apresenta 03 partes:

> Parte superior: cont√©m o nome da classe.
> Parte do meio: cont√©m os atributos da classe. 
> Parte inferior: inclui as opera√ß√µes da classe (m√©todos). As opera√ß√µes descrevem como uma classe interage com dados.

Todas as classes t√™m diferentes n√≠veis de acesso, dependendo do modificador de acesso (visibilidade). Veja os n√≠veis de acesso com seus s√≠mbolos correspondentes:

##### **CONTROLE DE ACESSO DAS CLASSES**

N√≠veis de acesso de visibilidade:

- :heavy_plus_sign: public √© p√∫blica, e pode ser acessada por qualquer pessoa. Vis√≠vel no universo.
- #Ô∏è‚É£ protected √© protegida, sendo permitida acesso apenas da classe e do pacote. E na sub-hierarquia.
- :heavy_minus_sign: private √© privada, sendo permitida acesso apenas da classe. 
- :wavy_dash: default: vis√≠vel no pacote.

ASSOCIA√á√ÉO DE CLASSE - Descrevem um v√≠nculo que ocorre entre os objetos de uma classe. S√£o representadas por uma linha/seta que liga as classes envolvidas.

:construction: **PASSO A PASSO**

1. No IDE escolhido, optei pelo Intellij, abra um novo projeto;

 üìå ALT + INSERT - atalho para criar package, classe, construtor, get, set...
 
 2. **Crie um package** (ex: br.com.dio)
 
 3. Clica em package e digita ALT + INSERT para **criar a classe** (Java Class). Sugest√£o de nome ex: PrimeiroPrograma. 
 
 Nesse primeiro programa n√£o deve aparecer o main. Para chamar escreve main embaixo de *public class PrimeiroPrograma* {
 
 4. **Para imprimir um dado** precisa informar System.out.println();, ou escreve apenas **sout**, que puxa o mesmo dado
 
 5. Para rodar o programa pela primeira vez CTRL + SHIFT + F10. A partir da 2o vez, basta clicar SHIFT + F10
 
 6. Informa os atributos da class, para depois cria o construtor. ex.: private String nome; ou private Integer idade;
 
 7. Para **criar um construtor** digita em qualquer lugar do corpo ALT + INSERT, aparece uma lista de op√ß√µes, selecionar construtor
 
 Se clicar apenas no campo superior (:m:) e escolher select none ser√° criado um construtor vazio.
 
 Para criar um construtor com atributos dentro seleciona as op√ß√µes apresentadas.
 
 8. **Criar Get and setter** digita ALT + INSERT, marca as op√ß√µes
 
 9. **Criar equals and hashCode()** digita ALT + INSERT, seleciona NEXT. Dependendo do caso n√£o marca nada e no final FINISH.
 
 10. **Criar toString()** digita ALT + INSERT, com todos os atributos. Aqui pode escolher o template. Nesse caso vamos selecionar String concat(+) + ok
 
 11. Depois vai no 'PrimeiroPrograma' e comenta o bloco {}
 
 ex: Cliente cliente = new Cliente ();
 
 Se o sistema reclamar √© porque precisa fazer o **import ALT+ENTER**
 
 12. Para imprimir SOUT - System.out.println(cliente);
 
 13. Para rodar SHIFT + F10
 
 14. Para **passar os dados para o GitHub**. Cria um novo reposit√≥rio para subir o c√≥digo fonte. No GitHub seleciona New Repository, informa o nome ex: teste-curso-dio, na descri√ß√£o informa o que acha necessario, marca publico ou privado, verifica as demais op√ß√µes e CRIA
 
 15. Copia o link "https://github..."
 
 16. Volta para o intelijj, vai em GIT, depois COMMIT, vai aparecer os arquivos criados. Seleciona o 1o. que sobe tudo, tem um campo para escrever a mensagem co commit, depois COMMIT and PUSH
 
 17. Aparece uma aba, marcar master - Define remote. Na URL pressiona CTRL V para copiar o endere√ßo http e OK.
 
 18. Marcar o projeto do lado direito - PUSH TAGS - PUSH - LOG In Via GitHub - Autoriza.
 
 19. Se fzer alguma altera√ß√£o no programa precisa ir em commit, que fica do lado esquerdo da tela. Depois PUSH - GIT - PUSH
 
 
 ### DICAS DE ATALHO 
 
 - Organizar a tela CTRL ALT L
 
 - Para andar entre as linhas  CTRL SHIFT e setas
 
 - Duplicar linha CTRL D
 
 - Apagar linha CTRL Y
 
 - Cometar um bloco CTRL SHIFT /
 
 - Comentar uma linha CTRL /
 
 - Para renomear uma classe SHIFT F6
 
 - Apagar imports que n√£o estao sendo usados CTRL ALT O
 
 - ALT + INSERT para criar Package, classe, construtor, set, get...
 
 - SOUT para System.out.println();
 
 - Rodar programa pela primeira vez CTRL + SHIFT + F10
 
 - Rodar programa pela segunda vez SHIFT + F10
 
 



